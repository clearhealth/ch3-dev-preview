res.charset = "utf-8";

/*
Inputs:
- dependencies: comma-separated list of resource names. No double-quotes or quotes around values.
- layerOptimize: comments, shrinksafe, packer
*/

var version = "0.9.0";
var xdDojoPath = "http://o.aolcdn.com/dojo/0.9.0";
//Directory that holds dojo source distro. Direct child under the helma dir
var dojoTopDir = "dojo09"; 

//Normalize the dependencies so that have double-quotes
//around each dependency.
var normalizedDependencies = req.data.dependencies || "";
if(normalizedDependencies){
	normalizedDependencies = '"' + normalizedDependencies.split(",").join('","') + '"';
}
var layerOptimize = req.data.layerOptimize || "";

var dojoDir = (new helma.File(dojoTopDir)).getAbsolutePath() + "/";
var buildscriptDir = dojoDir + "util/buildscripts/";

//Load the libraries to help in the build.
load(dojoDir + "util/buildscripts/jslib/logger.js");
load(dojoDir + "util/buildscripts/jslib/fileUtil.js");
load(dojoDir + "util/buildscripts/jslib/buildUtil.js");
load(dojoDir + "util/buildscripts/jslib/buildUtilXd.js");
load(dojoDir + "util/buildscripts/jslib/i18nUtil.js");

//Set up the build args.
var kwArgs = buildUtil.makeBuildOptions([
	"loader=xdomain",
	"version=" + version,
	"xdDojoPath=" + xdDojoPath,
	"layerOptimize=" + layerOptimize
]);

//Specify the basic profile for build.
var profileText = 'dependencies = {'
	+ 'layers: ['
	+ '	{'
	+ '		name: "dojo.js",'
	+ '		dependencies: ['
	+         normalizedDependencies
	+ '		]'
	+ '	}'
	+ '],'

	+ 'prefixes: ['
	+ '	[ "dojo", "' + dojoDir + 'dojo" ],'
	+ '	[ "dijit", "' + dojoDir + 'dijit" ],'
	+ '	[ "dojox", "' + dojoDir + 'dojox" ]'
	+ ']'
+ '}';

//Bring the profile into existence
var profileProperties = buildUtil.evalProfile(profileText, true);
kwArgs.profileProperties = profileProperties;

//Set up some helper variables.
var dependencies = kwArgs.profileProperties.dependencies;
var prefixes = dependencies.prefixes;
var lineSeparator = fileUtil.getLineSeparator();
var layerLegalText = fileUtil.readFile(buildscriptDir + "copyright.txt")
	+ lineSeparator
	+ fileUtil.readFile(buildscriptDir + "build_notice.txt");

//Manually set the loader on the dependencies object. Ideally the buildUtil.loadDependencyList() function
//and subfunctions would take kwArgs directly.
dependencies.loader = kwArgs.loader;

//Build the layer contents.
var depResult = buildUtil.makeDojoJs(buildUtil.loadDependencyList(kwArgs.profileProperties, null, buildscriptDir), kwArgs.version, kwArgs);

//Grab the content from the "dojo.xd.js" layer.
var layerName = depResult[1].layerName;
var layerContents = depResult[1].contents;

//Burn in xd path for dojo if requested, and only do this in dojo.xd.js.
if(layerName.match(/dojo\.xd\.js/) && kwArgs.xdDojoPath){
	layerContents = buildUtilXd.setXdDojoConfig(layerContents, kwArgs.xdDojoPath);
}

//Intern strings
if(kwArgs.internStrings){
	var prefixes = dependencies["prefixes"] || [];
	var skiplist = dependencies["internSkipList"] || [];
	layerContents = buildUtil.interningRegexpMagic(layerName, layerContents, dojoDir, prefixes, skiplist);
}

//Minify the contents
layerContents = buildUtil.optimizeJs(layerName, layerContents, layerLegalText, kwArgs.layerOptimize);

//The content of the response will be the layer contents.
res.data.body = layerContents;

//Send response
res.setHeader("Content-Type", "application/x-javascript");
res.setHeader("Content-disposition", "attachment; filename=dojo.js.custom.js");
renderSkin("download");
