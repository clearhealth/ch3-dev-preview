<style>
div.dhtmlxToolbar_ClearSilver#claimsToolbarId table.dhtmlxToolbarTable_ClearSilver td.dhtmlxToolbarItem table.itemPressed {
	background-color: #D3E2E5;
	border-bottom: #D3E2E5 1px solid;
}
div.dhtmlxToolbar_ClearSilver#claimsToolbarId table.dhtmlxToolbarTable_ClearSilver td.dhtmlxToolbarItem td.dhtmlxToolbarTEXT span {
	margin-left: -10px;
	margin-right: 10px;
}       
</style>
<div id="claimsToolbarId" style="width:100%;position:relative;"></div>
<div id="claimsLayoutId" style="width:100%;height:445px;position:relative;"></div>
<div id="claimsLeftPaneId" style="width:100%;">
	<div><?=$this->formSelect('claimSelectId',null,array('id'=>'claimSelectId','style'=>'width:150px;'),array('ClearHealth'))?></div>
	<div style="margin-top:20px;"><span id="claimsCtrId">0</span> <?=__('claims in queue')?></div>
	<div style="margin-top:5px;">Dated <span id="claimsDateRangeId"><?=date('m/d/Y',strtotime('-1 month'))?>-<?=date('m/d/Y',strtotime('-1 month'))?></span></div>
	<div style="margin-top:5px;">Totalling, $<span id="claimsTotalId">0.00</span></div>
	<div style="margin-top:100px;"><?=$this->formButton('transmitPrintId',__('Transmit/Print'),array('id'=>'transmitPrintId'))?></div>
</div>
<script>
var claimsLayout = new dhtmlXLayoutObject("claimsLayoutId", "2U");
claimsLayout.setEffect("collapse",true);
claimsLayout.cells("a").hideHeader();
claimsLayout.cells("a").setWidth("250");
claimsLayout.cells("b").hideHeader();
claimsLayout.cells("a").attachObject("claimsLeftPaneId");

var claimsGrid = claimsLayout.cells("b").attachGrid();
claimsGrid.setImagePath("<?=$this->baseUrl?>/img/");
claimsGrid.setHeader("<?=__('DOS')?>,<?=__('Patient')?>,<?=__('Total')?>,<?=__('Billed')?>,<?=__('Paid/WO')?>,<?=__('Balance')?>,<?=__('Current Insurer')?>,<?=__('Status')?>");
claimsGrid.setInitWidths("80,*,80,80,120,80,*,60");
claimsGrid.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro");
claimsGrid.enableMultiselect(true);
claimsGrid.init();
dhtmlxEvent(claimsGrid.entBox,"contextmenu",function(e){
	(e||event).cancelBubble=true;
	return false;
});

/* === MENU === */
var claimsMenu = new dhtmlXMenuObject(null,"standard");
claimsMenu.setImagePath("<?=$this->baseUrl?>/img/");
claimsMenu.renderAsContextMenu();
claimsMenu.setOpenMode("web");
claimsMenu.attachEvent("onClick",function(menuItemId,type){
	switch(menuItemId) {
		case "selectAll":
			claimsGrid.selectAll();
			break;
		case "batchOpen":
			claimsBatchVisits("open");
			break;
		case "batchClosed":
			claimsBatchVisits("closed");
			break;
		default:
			alert("<?=__('Invalid event')?>:"+menuItemId);
			break;
	}
});
claimsMenu.loadXML("<?=$this->baseUrl?>/claims.raw/get-context-menu",function(){});
claimsMenu.attachEvent("onContextMenu",function(id){
	claimsMenu.hideItem("batchOpen");
	claimsMenu.hideItem("batchClosed");
	var rowId = claimsGrid.getSelectedRowId();
	if (rowId != null) {
		claimsMenu.showItem("batchOpen");
		claimsMenu.showItem("batchClosed");
	}
});

claimsGrid.hdr.id = claimsGrid.uid();
claimsMenu.addContextZone(claimsGrid.hdr.id);
claimsGrid.enableContextMenu(claimsMenu);

function claimsBatchVisits(type) {
	var rowId = claimsGrid.getSelectedRowId();
	if (!rowId) {
		alert("<?=__('No item selected')?>");
		return;
	}
	if (!type || (type != "open" && type != "closed")) type = "open";
	if (!confirm("Are you sure you want to "+type+" selected items?")) return;
	dojo.xhrPost({
		url: globalBaseUrl + "/claims.raw/set-batch-visits",
		handleAs: "json",
		content: {
			"type": type,
			"ids": rowId,
		},
		load: function(data) {
			claimsGridReload();
			return data;
		},
		error: function(response) {
			console.error("ERROR: ",response.responseText);
			return response;
		}
	});
}

function claimsGridReload() {
	claimsGrid.clearAll();
	claimsGrid.load("<?=$this->baseUrl?>/claims.raw/list",function(){
		var claimsCtr = 0;
		var claimsTotal = 0;
		claimsGrid.forEachRow(function(id){
			claimsCtr++;
			claimsTotal += parseFloat(this.cells(id,2).getValue());
		});
		dojo.byId("claimsCtrId").innerHTML = claimsCtr;
		var value = boxDOSStart.getValue();
		var dateRange = value.getFullYear()+"/"+(value.getMonth()+1)+"/"+value.getDate();
		value = boxDOSEnd.getValue();
		dateRange += " - "+value.getFullYear()+"/"+(value.getMonth()+1)+"/"+value.getDate();
		dojo.byId("claimsDateRangeId").innerHTML = dateRange;
		dojo.byId("claimsTotalId").innerHTML = claimsTotal.toFixed(2);
	},"json");
}
claimsGridReload();

var claimsToolbar = new dhtmlXToolbarObject("claimsToolbarId","ClearSilver");
claimsToolbar.setIconsPath("<?=$this->baseUrl?>/img/");
function claimsToolbarOnClicked(id) {
	var parentId = null;
	var value = null;
	if (id == "advancedFilters") {
		globalCreateWindow("windowClaimsAdvancedFiltersId",[],"<?=$this->baseUrl?>/claims.raw/advanced-filters","<?=__('Advanced Filters')?>",500,300);
	}
	else if (id.substr(0,9) == "facility_") {
		parentId = "facility";
		value = id.substr(9);
	}
	else if (id.substr(0,8) == "insurer_") {
		parentId = "insurer";
		value = id.substr(8);
	}
	if (parentId != null) {
		claimsToolbar.setItemText(parentId,claimsToolbar.getListOptionText(parentId,id));
		var filters = {};
		filters["filters["+parentId+"]"] = value;
		claimsSetFilters(filters);
	}
}
claimsToolbar.attachEvent("onClick",claimsToolbarOnClicked);
claimsToolbar.attachEvent("onEnter",function(id,value){
});

function claimsDateFilterOnChanged(value,uid) {
	var filters = {};
	filters["filters["+uid+"]"] = value.getFullYear()+"-"+(value.getMonth()+1)+"-"+value.getDate();
	claimsSetFilters(filters);
}

var ctr = 1;
var params = {
	"uid": "DOSStart",
	"name": "DOSStart",
	"id": "DOSStart",
	"onChange": "claimsDateFilterOnChanged",
	"style": "width:80px;",
	"value": "<?=$this->filters['DOSStart']?>",
};
claimsToolbar.addDatePicker(params,"DOSStart",ctr++,"<?=__('DOS Start')?>","dhtmlxcalendar_icon.gif","dhtmlxcalendar_icon.gif");
claimsToolbar.addSeparator("sep"+ctr,ctr++);

params = {
	"uid": "DOSEnd",
	"name": "DOSEnd",
	"id": "DOSEnd",
	"onChange": "claimsDateFilterOnChanged",
	"style": "width:80px;",
	"value": "<?=$this->filters['DOSEnd']?>",
};
claimsToolbar.addDatePicker(params,"DOSEnd",ctr++,"<?=__('DOS End')?>","dhtmlxcalendar_icon.gif","dhtmlxcalendar_icon.gif");
claimsToolbar.addSeparator("sep"+ctr,ctr++);

var opts = [];
<?foreach($this->facilityIterator as $facilities):?>
opts.push(["facility_<?=$facilities['Practice']->practiceId.'_'.$facilities['Building']->buildingId.'_'.$facilities['Room']->roomId?>","obj","<?=$facilities['Building']->name?>-><?=$facilities['Room']->name?>","blank.gif"]);
<?endforeach?>
var parentId = "facility";
claimsToolbar.addButtonSelect(parentId,ctr++,"<?=__('Facility')?>",opts,"filter.png","filter.png");
claimsToolbar.setItemToolTip(parentId,"<?=__('Facility')?>");
<?if(strlen($this->filters['facility']) > 0):?>
var optionId = "facility_<?=$this->filters['facility']?>";
claimsToolbar.setListOptionSelected(parentId,optionId);
claimsToolbar.setItemText(parentId,claimsToolbar.getListOptionText(parentId,optionId));
<?endif;?>
claimsToolbar.addSeparator("sep"+ctr,ctr++);

opts = [];
<?foreach ($this->insurers as $id=>$name):?>
opts.push(["insurer_<?=$id?>","obj","<?=$name?>","blank.gif"]);
<?endforeach;?>
parentId = "insurer";
claimsToolbar.addButtonSelect(parentId,ctr++,"<?=__('Insurer')?>",opts,"filter.png","filter.png");
claimsToolbar.setItemToolTip(parentId,"<?=__('Insurer')?>");
<?if(strlen($this->filters['insurer']) > 0):?>
var optionId = "insurer_<?=$this->filters['insurer']?>";
claimsToolbar.setListOptionSelected(parentId,optionId);
claimsToolbar.setItemText(parentId,claimsToolbar.getListOptionText(parentId,optionId));
<?endif;?>
claimsToolbar.addSeparator("sep"+ctr,ctr++);

claimsToolbar.addButton("advancedFilters",ctr++,"<?=__('Advanced Filters')?>","filter.png","filter.png");

function claimsFilterExec(filters) {
	claimsSetFilters(filters);
}

function claimsSetFilters(filters,callback) {
	dojo.xhrPost({
		url: globalBaseUrl + "/claims.raw/set-filters",
		handleAs: "json",
		content: filters,
		load: function(data) {
			if (typeof callback == "function") {
				callback(data);
			}
			else {
				claimsGridReload();
			}
			return data;
		},
		error: function(response) {
			console.error("ERROR: ",response.responseText);
			return response;
		}
	});
}
</script>
