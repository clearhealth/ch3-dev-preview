<fieldset><legend><?=__('Allergies')?></legend>
<div id="allergiesGridId" style="float:left;width:550px;height:200px;overflow:auto;"></div>
</fieldset>
<fieldset><legend><?=__('Postings')?></legend>
<div id="postingsGridId" style="float:left;width:550px;height:200px;overflow:auto;"></div>
</fieldset>
<script>
function allergiesMarkEnteredInError(rowId) {
	if (!rowId) {
		var rowId = allergiesGrid.getSelectedRowId();
	}
	if (rowId == null) {
		alert('<?=__('No allergy selected')?>');
		return;
	}
	dojo.xhrPost({
		url: "<?=$this->baseUrl?>/allergies.raw/process-mark-entered-in-error",
		handleAs: "json",
		content: {
			id: rowId,
		},
		load: function (data) {
			allergiesGridReload();
			initMainToolbar(null,mainController.getActivePatient());
		},
		error: function (error) {
			alert(error);
			console.error ('Error: ', error);
		}
	});
}

function allergiesMarkNoKnownAllergies() {
	dojo.xhrPost({
		url: "<?=$this->baseUrl?>/allergies.raw/process-mark-no-known-allergies",
		handleAs: "json",
		content: {
			personId: mainController.getActivePatient(),
		},
		load: function (data) {
			alert(data);
			allergiesGridReload();
		},
		error: function (error) {
			alert(error);
			console.error ('Error: ', error);
		}
	});
}

function openNewAllergy(data) {
	var patientId = mainController.getActivePatient();
	var params = new Array();
	params.push("personId="+patientId);
	params.push("allergy="+data);
	globalCreateWindow("winAddAllergyId",params,"<?=$this->baseUrl?>/allergies.raw/add","<?=__('Enter Allergy or Adverse Reaction')?>",400,550);
}

function openLookupAllergy() {
	var patientId = mainController.getActivePatient();
	var params = new Array();
	params.push("personId="+patientId);
	params.push("callback=openNewAllergy");
	globalCreateWindow("winLookupAllergiesId",params,"<?=$this->baseUrl?>/allergies.raw/lookup","<?=__('Lookup Allergy/ADR')?>",400,400);
}

var allergiesMenu = new dhtmlXMenuObject(null,"standard");
allergiesMenu.setImagePath("<?=$this->baseUrl?>/img/");
allergiesMenu.renderAsContextMenu();
allergiesMenu.setOpenMode("web");
function allergiesMenuOnClicked(menuItemId,type) {
	switch(menuItemId) {
		case "newAllergy":
			openLookupAllergy();
			break;
		case "enteredInError":
			allergiesMarkEnteredInError();
			break;
		case "nka":
			allergiesMarkNoKnownAllergies();
			break;
	}
}
allergiesMenu.attachEvent("onClick",allergiesMenuOnClicked);
function allergiesMenuOnLoaded() {
}
allergiesMenu.loadXML("<?=$this->baseUrl?>/allergies.raw/get-context-menu",allergiesMenuOnLoaded);

var allergiesGrid = new dhtmlXGridObject("allergiesGridId");
allergiesGrid.setImagePath("<?=$this->baseUrl?>/img/");
allergiesGrid.setHeader("<?=__('Allergy')?>,<?=__('Severity')?>,<?=__('Signs/Symptoms')?>");
allergiesGrid.setInitWidths("*,*,*");
allergiesGrid.setColAlign("left,left,left");
allergiesGrid.setColTypes("ro,ro,ro");
allergiesGrid.setSkin("xp");

function allergiesGridOnDoubleClicked(rowId,colIndex) {
	var allergyName = allergiesGrid.cells(rowId,0).getValue();
	var params = new Array();
	params.push("id="+rowId);
	globalCreateWindow("winDetailsAllergyId",params,"<?=$this->baseUrl?>/allergies.raw/details",allergyName,400,400);
}
//allergiesGrid.attachEvent("onRowDblClicked",allergiesGridOnDoubleClicked);
function allergiesOnRowSelected(rowId,cellIndex) {
}
allergiesGrid.attachEvent("onRowSelect",allergiesOnRowSelected);

allergiesGrid.init();

// temporary replace grid onBeforeContextMenu
allergiesGrid.objBox.id = allergiesGrid.uid();
allergiesMenu.addContextZone(allergiesGrid.objBox.id);
allergiesMenu.attachEvent("onContextMenu",function(id){
	allergiesMenu.forEachItem(function (itemId) { allergiesMenu.hideItem(itemId); });
	var rowId = allergiesGrid.getSelectedRowId();
	allergiesMenu.showItem("newAllergy");
	if (rowId != null) {
		allergiesMenu.showItem("enteredInError");
	}
	var gridRowsize = allergiesGrid.getRowsNum();
 	if (gridRowsize == 0) {
		allergiesMenu.showItem("nka");
	}
});


dhtmlxEvent(allergiesGrid.entBox,"contextmenu",function(e){
	(e||event).cancelBubble=true;
	return false;
});

function allergiesGridOnLoaded() {
}

function allergiesGridReload() {
	allergiesGrid.clearAll();
	allergiesGrid.load("<?=$this->baseUrl?>/allergies.raw/list?personId="+mainController.getActivePatient(),allergiesGridOnLoaded,"json");
}

allergiesGridReload();


var postingsColFields = new Array();
// Note field names, in order based on postingsGrid.setHeader
postingsColFields.push("priority");
postingsColFields.push("note_date");
postingsColFields.push("user_id");
postingsColFields.push("reason");
postingsColFields.push("note");
postingsColFields.push("active");

var postingsGrid = new dhtmlXGridObject("postingsGridId");
postingsGrid.setImagePath("<?=$this->baseUrl?>/img/");
postingsGrid.setHeader("<?=__('Priority')?>,<?=__('Date')?>,<?=__('User')?>,<?=__('Reason')?>,<?=__('Note')?>,<?=__('Done')?>,");
postingsGrid.setInitWidths("60,150,150,150,300,50,0");
postingsGrid.setColTypes("coro,ed,ro,coro,txt,ro,ro");
postingsGrid.setSkin("xp");

function postingsGridOnCellEdited(stage,rowId,cellIndex,newValue,oldValue) {
	if (stage == 2 && newValue != oldValue) {
		switch (cellIndex) {
			case 3: // reason
				for (var i in postingsReasons) {
					var reason = postingsReasons[i];
					if (reason.data == newValue) {
						newValue = reason.id;
						break;
					}
				}
				break;
		}
		postingsEdit(rowId,postingsColFields[cellIndex],newValue);
	}
	return true;
}
postingsGrid.attachEvent("onEditCell",postingsGridOnCellEdited);

function postingsGridReload(showAll) {
	postingsGrid.clearAll();
	var url = "<?=$this->baseUrl?>/postings.raw/list?patientId="+mainController.getActivePatient();
	if (typeof showAll == "undefined") {
		showAll = postingsMenu.getCheckboxState("showAll");
	}
	if (showAll != null && showAll) { // showAll because this is called before check
		url += "&showAll=1";
	}
	postingsGrid.load(url,"json");
}

for (var i = 1; i <= 5; i++) {
	postingsGrid.getCombo(0).put(i,i);
}
//postingsGrid.getCombo(5).put("<?=__('No')?>","<?=__('No')?>");
//postingsGrid.getCombo(5).put("<?=__('Yes')?>","<?=__('Yes')?>");

var postingsReasons = new Array();
<?foreach ($this->reasons as $id=>$reason):?>
postingsReasons.push({id:"<?=$id?>",data:"<?=$reason?>"});
postingsGrid.getCombo(3).put("<?=$reason?>","<?=$reason?>");
<?endforeach;?>

function postingsProcessDone(data) {
	postingsGridReload();
}

function postingsEdit(id,field,value,callback) {
	if (typeof callback == "undefined") {
		callback = postingsProcessDone;
	}
	var content = {
		personId: mainController.getActivePatient(),
		orm: "patientNote",
		id: id,
		field: field,
		value: value,
	};
	globalProcessGeneric("process-edit-by-field",content,callback);
}

function postingsMenuOnClicked(menuItemId,type) {
	switch (menuItemId) {
		case "newPosting":
			postingsEdit(0,"posting","1",function(data){
				postingsProcessDone(data);
				initMainToolbar(null,mainController.getActivePatient());
			});
			break;
		case "showAll":
			postingsGridReload();
			break;
		case "markDone":
			var rowId = postingsGrid.getSelectedRowId();
			if (rowId != null) {
				postingsEdit(rowId,postingsColFields[5],"0",function(data){
					postingsProcessDone(data);
					initMainToolbar(null,mainController.getActivePatient());
				});
			}
			break;
		default:
			alert("<?=__('Invalid event')?> "+menuItemId);
	}
}

var postingsMenu = new dhtmlXMenuObject(null,"standard");
postingsMenu.setImagePath("<?=$this->baseUrl?>/img/");
postingsMenu.renderAsContextMenu();
postingsMenu.setOpenMode("web");
postingsMenu.attachEvent("onClick",postingsMenuOnClicked);
postingsMenu.loadXML("<?=$this->baseUrl?>/postings.raw/get-context-menu");
postingsMenu.attachEvent("onCheckboxClick",function(id,state,zoneId,caseState) {
	postingsGridReload(!state);
	postingsMenu.hideContextMenu();
	return true;
});

postingsGrid.objBox.id = postingsGrid.uid();
postingsMenu.addContextZone(postingsGrid.objBox.id);
postingsMenu.attachEvent("onContextMenu",function(id) {
	postingsMenu.forEachItem(function (itemId) { postingsMenu.hideItem(itemId); });
	var rowId = postingsGrid.getSelectedRowId();
	postingsMenu.showItem("newPosting");
	postingsMenu.showItem("showAll");
	if (rowId != null && postingsGrid.cells(rowId,6).getValue() == "1") {
		postingsMenu.showItem("markDone");
	}
});

dhtmlxEvent(postingsGrid.entBox,"contextmenu",function(e){
	(e||event).cancelBubble = true;
	return false;
});

postingsGrid.init();
postingsGridReload();
</script>
