<style>
input,select {
	margin: 0em 0.1em;
	border:1px solid #b3b3b3;
	line-height: normal;
	font-size: 100%;
	width: 15em;
}
</style>

<script>
function pdSingleUpdate(id,field,value,type,callback) {
	dojo.xhrPost({
		url: "<?=$this->baseUrl?>/patient.raw/process-edit-by-field",
		handleAs: "json",
		content: {
			personId: "<?=$this->form->personId->getValue()?>",
			type: type,
			id: id,
			field: field,
			value: value,
		},
		load: function (data) {
			if (typeof callback == 'function') {
				callback(data);
			}
		},
		error: function (error) {
			alert(error);
			console.error ('Error: ', error);
		}
	});
}

function pdRemove(id,type,callback) {
	dojo.xhrPost({
		url: "<?=$this->baseUrl?>/patient.raw/process-delete",
		handleAs: "json",
		content: {
			personId: '<?=$this->form->personId->getValue()?>',
			type: type,
			id: id,
		},
		load: function (data) {
			if (typeof callback == 'function') {
				callback(data);
			}
		},
		error: function (error) {
			alert(error);
			console.error ('Error: ', error);
		}
	});
}
</script>

<div style="width:100%;" id="pdContainerId">
	<div style="float:left;width:45%;">
		<?=$this->form->renderOpen()?>
		<fieldset><legend><?=__('Patient Information')?></legend>
		<div style="float:left;">
			<div style="display:table-cell;vertical-align:middle;height:100px;">
				<img src="<?=$this->baseUrl?>/img/no-person-image.png" />
			</div>
		</div>
		<div style="float:left;">
			<div class="formRow">
				<div style="float:left;">
					<?=$this->form->formPerson->lastName->renderLabel()?>
					<?=$this->form->formPerson->lastNameInput()?>
				</div>
				<div style="float:left;margin-left:10px;">
					<?=$this->form->formPerson->firstName->renderLabel()?>
					<?=$this->form->formPerson->firstNameInput()?>
				</div>
			</div>
			<br class="formRowDivider" />
			<div class="formRow">
				<div style="float:left;">
					<?=$this->form->formPerson->middleName->renderLabel()?>
					<?=$this->form->formPerson->middleNameInput()?>
				</div>
				<div style="float:left;margin-left:10px;">
					<?=$this->form->formPerson->dateOfBirth->renderLabel()?>
					<?=$this->form->formPerson->dateOfBirthInput()?>
				</div>
			</div>
			<br class="formRowDivider" />
			<div class="formRow">
				<div style="float:left;">
					<?=$this->form->formPerson->gender->renderLabel()?>
					<?=$this->form->formPerson->genderInput('FormSelect',array("options" => Enumeration::getEnumArray('Gender','enumerationId')))?>
				</div>
				<div style="float:left;margin-left:10px;">
					<?=$this->form->recordNumber->renderLabel()?>
					<?=$this->form->recordNumberInput()?>
				</div>
			</div>
			<br class="formRowDivider" />
			<div class="formRow">
				<div style="float:left;">
					<?=$this->form->formPerson->identifier->renderLabel()?>
					<?=$this->form->formPerson->identifierInput()?>
				</div>
				<div style="float:left;margin-left:10px;">
					<?=$this->form->formPerson->maritalStatus->renderLabel()?>
					<?=$this->form->formPerson->maritalStatusInput('FormSelect',array("options" => Enumeration::getEnumArray('Marital Status','enumerationId')))?>
				</div>
			</div>
			<br class="formRowDivider" />
			<div class="formRow">
				<div style="float:left;">
					<?=$this->form->confidentiality->renderLabel()?>
					<?=$this->form->confidentialityInput('FormSelect',array("options" => Enumeration::getEnumArray('Confidentiality','enumerationId')))?>
				</div>
				<div style="float:left;margin-left:10px;">
					<?=$this->form->signedHipaaDate->renderLabel()?>
					<?=$this->formDateText('patient[signedHipaaDate]',$this->form->signedHipaaDate->getValue(),array('id'=>'patient-signedHipaaDate'))?>
				</div>
			</div>
			<br class="formRowDivider" />
			<div class="formRow">
				<div style="float:left;">
					<?=$this->form->formPerson->primaryPracticeId->renderLabel()?>
					<?=$this->form->formPerson->primaryPracticeIdInput('FormSelect',array("options" => $this->facilityIterator->toArray('practiceId','name')))?>
				</div>
				<div style="float:left;margin-left:10px;">
					<?=$this->form->defaultProvider->renderLabel()?>
					<?=$this->form->defaultProviderInput('FormSelect',array("options" => Provider::getArray()))?>
				</div>
			</div>
			<br class="formRowDivider" />
			<div class="formRow">
				<?=$this->form->formPerson->active->renderLabel()?>
				<input type="checkbox" name="patient[person][active]" id="patient-person-active" helper="formText"<?=($this->form->formPerson->active->getValue())?' checked="checked"':''?> />
			</div>
			<br class="formRowDivider" />
			<div class="formRow">
				<div style="float:left;">
					<?=$this->form->personIdInput('FormHidden')?>
					<?=$this->form->formPerson->personIdInput('FormHidden')?>
					<?=$this->form->okInput()?>
				</div>
				<div style="float:left;margin-left:10px;">
					<script>
					function patDetailsSelectPatient() {
						windowSelectPatient();
						winPD.close();
					}
					</script>
					<?=$this->formButton('selectPatient',__('Select Patient'),array('onClick'=>'patDetailsSelectPatient()'))?>
				</div>
			</div>
			<?=$this->form->renderClose()?>
			<script>
			function preSubmitpatientdetails() {
				dojo.xhrPost ({
					url: "<?=$this->baseUrl?>/patient.raw/process-details",
					form: 'patientdetails',
					load: function(data) {
						initMainToolbar(null,mainController.getActivePatient());
						alert(data);
					},
					error: function (error) {
						console.error ('Error: ', error);
					}
				});

				return false; // don't submit anymore, it's already submitted
			}
			</script>
		</div>
		</fieldset>
	</div>


	<div style="float:left;width:55%;">
		<fieldset><legend><?=__('Phone numbers')?> (<a href="javascript:patDetailsPhonesAdd()" title="<?=__('Add New')?>"><?=__('Add New')?></a>)</legend>
			<div id="patDetailsPhonesGridContainer" style="height:150px;"></div>
		</fieldset>
		<fieldset><legend><?=__('Addresses')?> (<a href="javascript:patDetailsAddrAdd()" title="<?=__('Add New')?>"><?=__('Add New')?></a>)</legend>
			<div id="patDetailsAddrGridContainer" style="height:150px;"></div>
		</fieldset>
		<script>
		var patDetailsPhonesGrid = new dhtmlXGridObject("patDetailsPhonesGridContainer");
		patDetailsPhonesGrid.setImagePath("<?=$this->baseUrl?>/img/");
		patDetailsPhonesGrid.setHeader("<?=__('Description')?>,<?=__('Type')?>,<?=__('Number')?>,<?=__('Notes')?>,<?=__('Active')?>");
		patDetailsPhonesGrid.setInitWidths("*,35,*,*,40");
		patDetailsPhonesGrid.setColTypes("ed,ed,ed,ed,ch");
		patDetailsPhonesGrid.setSkin("xp");
		patDetailsPhonesGrid.attachEvent("onEditCell",patDetailsPhonesGridOnCellEdited);
		patDetailsPhonesGrid.attachEvent("onCheck",function(rowId,cellIndex,state){
								var val = 0;
								if (state) {
									val = 1;
								}
								patDetailsSingleUpdate(rowId,patDetailsPhonesColFields[cellIndex],val,"phone",patDetailsPhonesGridReload);
							});
		function patDetailsPhonesGridReload() {
			patDetailsPhonesGrid.clearAll();
			patDetailsPhonesGrid.load("<?=$this->baseUrl?>/patient.raw/ajax-list-phones?patientId=<?=$this->form->personId->getValue()?>","json");
		}
		patDetailsPhonesGrid.init();
		patDetailsPhonesGridReload();

		function patDetailsPhonesRemove(id) {
			patDetailsRemove(id,"phone",patDetailsPhonesGridReload);
		}

		function patDetailsPhonesAdd() {
			if (patDetailsPhonesGrid.doesRowExist(0)) {
				patDetailsPhonesGrid.selectRow(patDetailsPhonesGrid.getRowIndex(0),true);
			}
			else {
				pdSingleUpdate(0,patDetailsPhonesColFields[0],"blank","phone",patDetailsPhonesGridReload);
			}
		}

		function patDetailsPhonesMenuOnClicked(menuItemId,type) {
			var rowCol = type.split('_');
			switch (menuItemId) {
				case 'menuRemove':
					patDetailsPhonesRemove(rowCol[0]);
					break;
				default:
					alert("<?=__('Invalid event')?>");
			}
		}

		var patDetailsPhonesMenu = new dhtmlXMenuObject('patDetailsPhonesMenu','standard');
		patDetailsPhonesMenu.setImagePath("<?=$this->baseUrl?>/img/");
		patDetailsPhonesMenu.renderAsContextMenu();
		patDetailsPhonesMenu.setOpenMode("web");
		patDetailsPhonesMenu.attachEvent('onClick',patDetailsPhonesMenuOnClicked);
		patDetailsPhonesMenu.loadXML('<?=$this->baseUrl?>/patient.raw/ajax-get-context-menu');

		patDetailsPhonesGrid.enableContextMenu(patDetailsPhonesMenu);
		dhtmlxEvent(patDetailsPhonesGrid.entBox,"contextmenu",function(e){
			(e||event).cancelBubble=true;
			return false;
		});

		var patDetailsPhonesColFields = new Array();
		// Phone field names, in order based on patDetailsPhonesGrid.setHeader
		patDetailsPhonesColFields.push("name");
		patDetailsPhonesColFields.push("type");
		patDetailsPhonesColFields.push("number");
		patDetailsPhonesColFields.push("notes");
		patDetailsPhonesColFields.push("active");

		function patDetailsPhonesGridOnCellEdited(stage,rowId,cellIndex,newValue,oldValue) {
			if (stage == 2 && newValue != oldValue) {
				patDetailsSingleUpdate(rowId,patDetailsPhonesColFields[cellIndex],newValue,"phone",patDetailsPhonesGridReload);
			}
			return true;
		}

		var patDetailsAddrGrid = new dhtmlXGridObject("patDetailsAddrGridContainer");
		patDetailsAddrGrid.setImagePath("<?=$this->baseUrl?>/img/");
		patDetailsAddrGrid.setHeader("<?=__('Description')?>,<?=__('Type')?>,<?=__('Line1')?>,<?=__('Line2')?>,<?=__('City')?>,<?=__('State')?>,<?=__('Zip')?>,<?=__('Notes')?>,<?=__('Active')?>");
		patDetailsAddrGrid.setInitWidths("*,35,*,*,*,40,*,*,40");
		patDetailsAddrGrid.setColTypes("ed,ed,ed,ed,ed,coro,ed,ed,ch");
		patDetailsAddrGrid.setSkin("xp");
		patDetailsAddrGrid.attachEvent("onEditCell",patDetailsAddrGridOnCellEdited);
		patDetailsAddrGrid.attachEvent("onCheck",function(rowId,cellIndex,state){
								var val = 0;
								if (state) {
									val = 1;
								}
								patDetailsSingleUpdate(rowId,patDetailsAddrColFields[cellIndex],val,"address",patDetailsAddrGridReload);
							});
		// state
		patDetailsAddrGrid.getCombo(5).put("","");
		<?foreach ($this->statesList as $key=>$name):?>
		patDetailsAddrGrid.getCombo(5).put("<?=$key?>","<?=$key?>");
		<?endforeach;?>

		function patDetailsAddrGridReload() {
			patDetailsAddrGrid.clearAll();
			patDetailsAddrGrid.load("<?=$this->baseUrl?>/patient.raw/ajax-list-addresses?patientId=<?=$this->form->personId->getValue()?>","json");
		}
		patDetailsAddrGrid.init();
		patDetailsAddrGridReload();

		function patDetailsAddrRemove(id) {
			patDetailsRemove(id,"address",patDetailsAddrGridReload);
		}

		function patDetailsAddrAdd() {
			if (patDetailsAddrGrid.doesRowExist(0)) {
				patDetailsAddrGrid.selectRow(patDetailsAddrGrid.getRowIndex(0),true);
			}
			else {
				pdSingleUpdate(0,patDetailsAddrColFields[0],"blank","address",patDetailsAddrGridReload);
			}
		}

		function patDetailsAddrMenuOnClicked(menuItemId,type) {
			var rowCol = type.split('_');
			switch (menuItemId) {
				case 'menuRemove':
					patDetailsAddrRemove(rowCol[0]);
					break;
				default:
					alert("<?=__('Invalid event')?>");
			}
		}

		var patDetailsAddrMenu = new dhtmlXMenuObject('patDetailsAddrMenu','standard');
		patDetailsAddrMenu.setImagePath("<?=$this->baseUrl?>/img/");
		patDetailsAddrMenu.renderAsContextMenu();
		patDetailsAddrMenu.setOpenMode("web");
		patDetailsAddrMenu.attachEvent('onClick',patDetailsAddrMenuOnClicked);
		patDetailsAddrMenu.loadXML('<?=$this->baseUrl?>/patient.raw/ajax-get-context-menu');

		patDetailsAddrGrid.enableContextMenu(patDetailsAddrMenu);
		dhtmlxEvent(patDetailsAddrGrid.entBox,"contextmenu",function(e){
			(e||event).cancelBubble=true;
			return false;
		});

		var patDetailsAddrColFields = new Array();
		// Address field names, in order based on patDetailsAddrGrid.setHeader
		patDetailsAddrColFields.push("name");
		patDetailsAddrColFields.push("type");
		patDetailsAddrColFields.push("line1");
		patDetailsAddrColFields.push("line2");
		patDetailsAddrColFields.push("city");
		//patDetailsAddrColFields.push("region");
		patDetailsAddrColFields.push("state");
		patDetailsAddrColFields.push("postal_code");
		patDetailsAddrColFields.push("notes");
		patDetailsAddrColFields.push("active");

		function patDetailsAddrGridOnCellEdited(stage,rowId,cellIndex,newValue,oldValue) {
			if (stage == 2 && newValue != oldValue) {
				patDetailsSingleUpdate(rowId,patDetailsAddrColFields[cellIndex],newValue,"address",patDetailsAddrGridReload);
			}
			return true;
		}

		function patDetailsSingleUpdate(id,field,value,type,callback) {
			dojo.xhrPost({
				url: "<?=$this->baseUrl?>/patient.raw/process-edit-by-field",
				handleAs: "json",
				content: {
					personId: '<?=$this->form->personId->getValue()?>',
					type: type,
					id: id,
					field: field,
					value: value,
				},
				load: function (data) {
					if (typeof callback == 'function') {
						callback(data);
					}
				},
				error: function (error) {
					alert(error);
					console.error ('Error: ', error);
				}
			});
		}

		function patDetailsRemove(id,type,callback) {
			dojo.xhrPost({
				url: "<?=$this->baseUrl?>/patient.raw/process-delete",
				handleAs: "json",
				content: {
					personId: '<?=$this->form->personId->getValue()?>',
					type: type,
					id: id,
				},
				load: function (data) {
					if (typeof callback == 'function') {
						callback(data);
					}
				},
				error: function (error) {
					alert(error);
					console.error ('Error: ', error);
				}
			});
		}

		</script>
	</div>

	<br style="clear:left;" />
	<div style="float:left;width:100%;">
		<fieldset><legend><?=__('Notes')?> (<a href="javascript:pdNotesAdd()" title="<?=__('Add New')?>"><?=__('Add New')?></a>)</legend>
			<div id="pdNotesGridId" style="height:100px;"></div>
		</fieldset>
		<script>
		var pdNotesGrid = new dhtmlXGridObject("pdNotesGridId");
		pdNotesGrid.setImagePath("<?=$this->baseUrl?>/img/");
		pdNotesGrid.setHeader("<?=__('Priority')?>,<?=__('Date')?>,<?=__('User')?>,<?=__('Reason')?>,<?=__('Note')?>,<?=__('Done')?>");
		pdNotesGrid.setInitWidths("60,150,150,300,*,50");
		pdNotesGrid.setColTypes("coro,ed,ro,coro,txt,coro");
		pdNotesGrid.setSkin("xp");
		pdNotesGrid.attachEvent("onEditCell",pdNotesGridOnCellEdited);
		pdNotesGrid.attachEvent("onCheck",function(rowId,cellIndex,state){
								var val = 0;
								if (state) {
									val = 1;
								}
								pdSingleUpdate(rowId,pdNotesColFields[cellIndex],val,"note",pdNotesGridReload);
							});
		for (var i = 1; i <= 5; i++) {
			pdNotesGrid.getCombo(0).put(i,i);
		}
		pdNotesGrid.getCombo(5).put("<?=__('No')?>","<?=__('No')?>");
		pdNotesGrid.getCombo(5).put("<?=__('Yes')?>","<?=__('Yes')?>");

		var pdReasons = new Array();
		<?foreach ($this->reasons as $id=>$reason):?>
		pdReasons[pdReasons.length] = {id:"<?=$id?>",data:"<?=$reason?>"};
		pdNotesGrid.getCombo(3).put("<?=$reason?>","<?=$reason?>");
		<?endforeach;?>
		function pdNotesGridReload() {
			pdNotesGrid.clearAll();
			pdNotesGrid.load("<?=$this->baseUrl?>/patient.raw/list-notes?patientId=<?=$this->form->personId->getValue()?>","json");
		}
		pdNotesGrid.init();
		pdNotesGridReload();

		function pdNotesRemove(id) {
			patDetailsRemove(id,"note",pdNotesGridReload);
		}

		function pdNotesAdd() {
			if (pdNotesGrid.doesRowExist(0)) {
				pdNotesGrid.selectRow(pdNotesGrid.getRowIndex(0),true);
			}
			else {
				pdSingleUpdate(0,pdNotesColFields[4],"blank","note",pdNotesGridReload);
			}
		}

		function pdNotesMenuOnClicked(menuItemId,type) {
			var rowCol = type.split('_');
			switch (menuItemId) {
				case 'menuRemove':
					pdNotesRemove(rowCol[0]);
					break;
				default:
					alert("<?=__('Invalid event')?>");
			}
		}

		var pdNotesMenu = new dhtmlXMenuObject('pdNotesMenu','standard');
		pdNotesMenu.setImagePath("<?=$this->baseUrl?>/img/");
		pdNotesMenu.renderAsContextMenu();
		pdNotesMenu.setOpenMode("web");
		pdNotesMenu.attachEvent('onClick',pdNotesMenuOnClicked);
		pdNotesMenu.loadXML('<?=$this->baseUrl?>/patient.raw/ajax-get-context-menu');

		pdNotesGrid.enableContextMenu(pdNotesMenu);
		dhtmlxEvent(pdNotesGrid.entBox,"contextmenu",function(e){
			(e||event).cancelBubble=true;
			return false;
		});

		var pdNotesColFields = new Array();
		// Note field names, in order based on pdNotesGrid.setHeader
		pdNotesColFields.push("priority");
		pdNotesColFields.push("note_date");
		pdNotesColFields.push("user_id");
		pdNotesColFields.push("reason");
		pdNotesColFields.push("note");
		pdNotesColFields.push("active");

		function pdNotesGridOnCellEdited(stage,rowId,cellIndex,newValue,oldValue) {
			if (stage == 2 && newValue != oldValue) {
				switch (cellIndex) {
					case 3: // reason
						for (var i in pdReasons) {
							var reason = pdReasons[i];
							if (reason.data == newValue) {
								newValue = reason.id;
								break;
							}
						}
						break;
					case 5: // active
						if (newValue == "<?=__('Yes')?>") {
							newValue = 0;
						}
						else {
							newValue = 1;
						}
						break;
				}
				pdSingleUpdate(rowId,pdNotesColFields[cellIndex],newValue,"note",pdNotesGridReload);
			}
			return true;
		}
		</script>
	</div>

	<br style="clear:left;" />
	<div style="float:left;width:100%;">
		<fieldset><legend><?=__('Insurers')?> (<a href="javascript:pdInsurersEdit()" title="<?=__('Add New')?>"><?=__('Add New')?></a>)</legend>
			<div id="pdInsurersGridId" style="height:100px;"></div>
		</fieldset>
	</div>
	<script>
	var pdInsurersGrid = new dhtmlXGridObject("pdInsurersGridId");
	pdInsurersGrid.setImagePath("<?=$this->baseUrl?>/img/");
	pdInsurersGrid.setHeader("<?=__('Company')?>,<?=__('Program')?>,<?=__('Group Name')?>,<?=__('Group Number')?>,<?=__('Co-pay')?>,<?=__('Subscriber')?>,<?=__('Effective')?>,<?=__('Active')?>");
	pdInsurersGrid.setInitWidths("150,150,150,150,100,200,120,50");
	pdInsurersGrid.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro");
	pdInsurersGrid.setSkin("xp");
	pdInsurersGrid.getCombo(6).put("<?=__('No')?>","<?=__('No')?>");
	pdInsurersGrid.getCombo(6).put("<?=__('Yes')?>","<?=__('Yes')?>");
	function pdInsurersGridReload() {
		pdInsurersGrid.clearAll();
		pdInsurersGrid.load("<?=$this->baseUrl?>/patient.raw/list-insurers?patientId=<?=$this->form->personId->getValue()?>","json");
	}
	function pdInsurersGridOnDoubleClicked(rowId,colIndex) {
		pdInsurersEdit(rowId);
	}
	pdInsurersGrid.attachEvent("onRowDblClicked",pdInsurersGridOnDoubleClicked);
	pdInsurersGrid.init();
	pdInsurersGridReload();

	function pdInsurersRemove(id) {
		patDetailsRemove(id,"insurer",pdInsurersGridReload);
	}

	function pdInsurersEdit(id) {
		var winLabel = "<?=__('Edit')?>";
		if (!id) {
			winLabel = "<?=__('Add')?>";
			id = 0;
		}
		var params = new Array();
		params.push("id="+id);
		params.push("patientId=<?=$this->form->personId->getValue()?>");
		globalCreateWindow("winEditInsurerId",params,"<?=$this->baseUrl?>/patient.raw/edit-insurer",winLabel+" <?=__('Insurer')?>",350,400);
	}

	function pdInsurersMenuOnClicked(menuItemId,type) {
		var rowCol = type.split("_");
		switch (menuItemId) {
			case "menuRemove":
				pdInsurersRemove(rowCol[0]);
				break;
			default:
				alert("<?=__('Invalid event')?>");
		}
	}

	var pdInsurersMenu = new dhtmlXMenuObject("pdInsurersMenu","standard");
	pdInsurersMenu.setImagePath("<?=$this->baseUrl?>/img/");
	pdInsurersMenu.renderAsContextMenu();
	pdInsurersMenu.setOpenMode("web");
	pdInsurersMenu.attachEvent("onClick",pdInsurersMenuOnClicked);
	pdInsurersMenu.loadXML("<?=$this->baseUrl?>/patient.raw/ajax-get-context-menu");

	pdInsurersGrid.enableContextMenu(pdInsurersMenu);
	dhtmlxEvent(pdInsurersGrid.entBox,"contextmenu",function(e){
		(e||event).cancelBubble=true;
		return false;
	});
	</script>


	<br style="clear:left;" />
	<div style="float:left;width:100%;">
		<fieldset><legend><?=__('Patient Statistics')?></legend>
			<div id="pdStatsGridId" style="height:100px;"></div>
			<div id="pdStatsContainerId" style="position:absolute;display:none;background-color:Silver;padding:3px;border:1px solid #000;width:200px;">
				<div style="float:left;width:100%;background-color:#fff;">
					<fieldset><legend><?=__('Edit Statistics')?></legend>
					<div id="pdStatsPanelId"></div>
					<br />
					<?=$this->formButton('pdStatsOK',__('OK'),array('id'=>'pdStatsOK','class'=>'smallButton','disabled'=>true,'onClick'=>'pdStatsSave()'))?>
					</fieldset>
				</div>
			</div>
		</fieldset>
	</div>
</div>

<script>
var pdStatsGrid = new dhtmlXGridObject("pdStatsGridId");
pdStatsGrid.setImagePath("<?=$this->baseUrl?>/img/");
pdStatsGrid.setHeader("<?=__('Name')?>,<?=__('Value')?>");
pdStatsGrid.setInitWidths("*,*");
pdStatsGrid.setColTypes("ro,ro");
pdStatsGrid.setSkin("xp");
pdStatsGrid.init();
function pdStatsGridReload() {
	pdStatsGrid.clearAll();
	pdStatsGrid.load("<?=$this->baseUrl?>/patient.raw/list-stats?personId=<?=$this->form->personId->getValue()?>",pdStatsGridOnLoaded,"json");
}
pdStatsGridReload();

function pdStatsGridOnLoaded() {
	pdStatsHidePanel();
}

function pdStatsEdit(name,value) {
	dojo.xhrPost({
		url: "<?=$this->baseUrl?>/patient.raw/process-edit-stats",
		handleAs: "json",
		content: {
			"personId": "<?=$this->form->personId->getValue()?>",
			"name": name,
			"value": value,
		},
		load: function (data) {
			if (!data) {
				alert("<?=__('Failed to save')?>");
			}
			else {
				pdStatsGridReload();
			}
		},
		error: function (error) {
			alert(error);
			console.error ("Error: ",error);
		}
	});
}
function pdStatsGridOnCellEdited(stage,rowId,cellIndex,newValue,oldValue) {
	if (stage == 2 && newValue != oldValue) {
		switch (cellIndex) {
			case 1:
				pdStatsEdit(rowId,newValue);
				break;
			default:
				return false;
		}
	}
	return true;
}
pdStatsGrid.attachEvent("onEditCell",pdStatsGridOnCellEdited);

dhtmlxEvent(pdStatsGrid.entBox,"contextmenu",function(e){
	(e||event).cancelBubble=true;
	return false;
});

var globalPDStatsId = null;
pdStatsGrid.attachEvent("onRowDblClicked",pdStatsGridOnRowDblClicked);
function pdStatsGridOnRowDblClicked(rowId,cellIndex) {
	var obj = pdStatsGrid.cells(rowId,1).cell;
	var offsetLeft = 0;
	var offsetTop = 0;
	if (obj.offsetParent) {
		var scrollDiff = 0;
		var gridOffsetHeight = pdStatsGrid.entBox.offsetHeight - pdStatsGrid.hdr.offsetHeight;
		if (obj.offsetTop > gridOffsetHeight) {
			scrollDiff = obj.offsetTop - gridOffsetHeight + 100;
		}
		while (true) {
			offsetLeft += obj.offsetLeft;
			offsetTop += obj.offsetTop;
			if (!obj.offsetParent) break;
			obj = obj.offsetParent;
		}
		offsetTop -= scrollDiff;
	}
	else if (obj.x) {
		offsetLeft += obj.x;
		offsetTop += obj.y;
	}
	var win = dhxWins.window("<?=$this->form->getWindow()?>");
	if (win) {
		var pos = win.getPosition();
		offsetLeft -= (pos[0] + 6); // left
		offsetTop -= (pos[1] + 12); // top
	}
	offsetLeft -= 340;

	var pdStatsContainer = dojo.byId("pdStatsContainerId");
	pdStatsContainer.style.display = "";
	pdStatsContainer.style.left = offsetLeft + "px";
	pdStatsContainer.style.top = offsetTop + "px";

	var statsValue = pdStatsGrid.cells(rowId,1).getValue();
	var pdStatsOK = dojo.byId("pdStatsOK");
	pdStatsOK.disabled = false;
	var pdStatsPanel = dojo.byId("pdStatsPanelId");
	pdStatsPanel.innerHTML = "";
	var options = pdStatsGrid.getUserData(rowId,"options");
	globalPDStatsId = rowId;
	switch (pdStatsGrid.getUserData(rowId,"type")) {
		case "<?=PatientStatisticsDefinition::TYPE_ENUM?>":
			pdStatsPanel.innerHTML = (<r><![CDATA[
				<select name="pdStatsTypeEnumId" id="pdStatsTypeEnumId"></select>
			]]></r>).toString();
			var enumSelect = dojo.byId("pdStatsTypeEnumId");
			enumSelect.length = 0;
			var ctr = 0;
			var selectedIndex = 0;
			for (var i in options) {
				if (options[i].key == statsValue) {
					selectedIndex = ctr;
				}
				enumSelect.options[ctr++] = new Option(options[i].value,options[i].key);
			}
			enumSelect.selectedIndex = selectedIndex;
			break;
		case "<?=PatientStatisticsDefinition::TYPE_INPUT?>":
			pdStatsPanel.innerHTML = (<r><![CDATA[
				<input type="text" name="pdStatsTypeInputId" id="pdStatsTypeInputId" />
			]]></r>).toString();
			dojo.byId("pdStatsTypeInputId").value = statsValue;
			break;
		case "<?=PatientStatisticsDefinition::TYPE_CHECKBOX?>":
			pdStatsPanel.innerHTML = (<r><![CDATA[
				<input type="checkbox" name="pdStatsTypeCheckboxId" id="pdStatsTypeCheckboxId" />
			]]></r>).toString();
			dojo.byId("pdStatsTypeCheckboxId").checked = (statsValue == "1")?true:false;
			dojo.byId("pdStatsTypeCheckboxId").value = statsValue;
			break;
		case "<?=PatientStatisticsDefinition::TYPE_DATE?>":
			pdStatsPanel.innerHTML = (<r><![CDATA[
				<input type="text" name="pdStatsTypeDateId" id="pdStatsTypeDateId" />
			]]></r>).toString();
			pdStatsBuildDatePicker(statsValue);
			break;
		default:
			pdStatsOK.disabled = true;
			break;
	}
}

var pdStatsTypeDate = null;
function pdStatsBuildDatePicker(value) {
	pdStatsTypeDate = dijit.byId("pdStatsTypeDateId");
	if (typeof pdStatsTypeDate != "undefined") {
		pdStatsTypeDate.destroyRecursive();
		pdStatsTypeDate = null;
	}
	pdStatsTypeDate = new dijit.form.DateTextBox({name:"pdStatsTypeDateId",constraints:{datePattern:"yyyy-MM-dd"},disabled:false,style:"width:90px;"},dojo.byId("pdStatsTypeDateId"));
	var datetmp = new Date();
	if (value.length > 0 && value.substr(0,10) != "0000-00-00") {
		var x = value.split("-");
		datetmp.setFullYear(x[0],(x[1]-1),x[2].substr(0,2));
	}
	pdStatsTypeDate.setValue(datetmp);
}

function pdStatsDivOnClicked(evt) {
	var target = evt.target;
	var isOverlay = false;
	var parentNode = target;
	while (parentNode) {
		if (parentNode.id == "pdStatsContainerId") {
			isOverlay = true;
			break;
		}
		parentNode = parentNode.parentNode;
	}
	if (!isOverlay) {
		pdStatsHidePanel();
	}
}
dojo.connect(dojo.byId("pdContainerId"),"onclick","pdStatsDivOnClicked");

function pdStatsSave() {
	if (globalPDStatsId == null) return;
	var value = "";
	switch (pdStatsGrid.getUserData(globalPDStatsId,"type")) {
		case "<?=PatientStatisticsDefinition::TYPE_ENUM?>":
			var enumSelect = dojo.byId("pdStatsTypeEnumId");
			value = enumSelect.options[enumSelect.selectedIndex].value;
			break;
		case "<?=PatientStatisticsDefinition::TYPE_INPUT?>":
			value = dojo.byId("pdStatsTypeInputId").value;
			break;
		case "<?=PatientStatisticsDefinition::TYPE_CHECKBOX?>":
			value = 0;
			if (dojo.byId("pdStatsTypeCheckboxId").checked) {
				value = 1;
			}
			break;
		case "<?=PatientStatisticsDefinition::TYPE_DATE?>":
			var statsValue = pdStatsTypeDate.getValue();
			value = statsValue.getFullYear()+"-"+(statsValue.getMonth()+1)+"-"+statsValue.getDate();
			break;
		default:
			return;
	}
	pdStatsEdit(globalPDStatsId,value);
}

function pdStatsHidePanel() {
	globalPDStatsId = null;
	var pdStatsContainer = dojo.byId("pdStatsContainerId");
	pdStatsContainer.style.display = "none";
}
</script>
